config {
  type: "view",
  schema: "validacao_smtr",
}


js {
    const moment = require("moment");
    const today = new Date();
    run_date = moment(today).format("YYYY-MM-DD");

    if (run_date == "2024-05-05") {
        gps_interval = 7;
    } else {
        gps_interval = 3;
    }

}


-- 1. Seleciona sinais de GPS registrados no período
with gps as (
    select 
        g.* except(longitude, latitude, servico),
        ${when(Date.parse("run_date") > Date.parse("2023-01-16") && Date.parse("run_date") < Date.parse("2023-12-02"),
        `-- Substitui servicos noturnos por regulares, salvo exceções
        case
            when servico like "SN%" and servico not in ("SN006", "SN415", "SN474", "SN483")
            then REGEXP_EXTRACT(servico, r'[0-9]+')
            else servico
        end as servico,`,
        `servico,`
        )}
        substr(id_veiculo, 2, 3) as id_empresa,
        ST_GEOGPOINT(longitude, latitude) posicao_veiculo_geo,
        ${when(Date.parse(run_date) > Date.parse(constants.DATA_SUBSIDIO_V6_INICIO),
        `date_sub(date("${run_date}"), interval 1 day) as data_operacao`
        )}
    from 
        ${ref('gps_sppo')} g
    where (
        data between date_sub(date("${run_date}"), interval 1 day) and date("${run_date}")
    )
    -- Limita range de busca do gps de D-2 às 00h até D-1 às 3h
    and (
        timestamp_gps between datetime_sub(datetime_trunc("${run_date}", day), interval 1 day)
        and datetime_add(datetime_trunc("${run_date}", day), interval ${gps_interval} hour)
    )
    and status != "Parado garagem"
),
-- 2. Classifica a posição do veículo em todos os shapes possíveis de
--    serviços de uma mesma empresa
status_viagem as (
    select
        ${when(Date.parse(run_date) > Date.parse(constants.DATA_SUBSIDIO_V6_INICIO),
        `data_operacao as data,`,
        `g.data,`
        )}
        g.id_veiculo,
        g.id_empresa,
        g.timestamp_gps,
        timestamp_trunc(g.timestamp_gps, minute) as timestamp_minuto_gps,
        g.posicao_veiculo_geo,
        TRIM(g.servico, " ") as servico_informado,
        s.servico as servico_realizado,
        s.shape_id,
        s.sentido_shape,
        s.shape_id_planejado,
        s.trip_id,
        s.trip_id_planejado,
        s.sentido,
        s.start_pt,
        s.end_pt,
        s.distancia_planejada,
        ifnull(g.distancia,0) as distancia,
        case
            when ST_DWITHIN(g.posicao_veiculo_geo, start_pt, ${constants.buffer})
            then 'start'
            when ST_DWITHIN(g.posicao_veiculo_geo, end_pt, ${constants.buffer})
            then 'end'
            when ST_DWITHIN(g.posicao_veiculo_geo, shape, ${constants.buffer})
            then 'middle'
        else 'out'
        end status_viagem
    from 
        gps g
    inner join (
        select 
            *
        from
            ${ref("viagem_planejada")}
        where
            ${when(Date.parse(run_date) > Date.parse(constants.DATA_SUBSIDIO_V6_INICIO),
            `data = date_sub(date("${run_date}"), interval 1 day)`,
            `data between date_sub(date("${run_date}"), interval 1 day) and date("${run_date}"))`
            )}
    ) s
    on 
        ${when(Date.parse(run_date) > Date.parse(constants.DATA_SUBSIDIO_V6_INICIO),
        `g.data_operacao = s.data`,
        `g.data = s.data`
        )}
        and g.servico = s.servico
)
select 
    *,
    '${constants.version}' as versao_modelo
from 
    status_viagem